"use client";

import { useState, useMemo, useCallback, memo, useRef, useEffect } from "react";
import { Layout } from "@/components/layout";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Plus,
  Minus,
  X,
  CreditCard,
  Banknote,
  ShoppingCart,
  Search,
  ChevronDown,
  ChevronUp,
  ArrowRight,
  ImageIcon,
  Check,
  Printer,
  Smartphone,
  Ticket,
  RotateCcw,
  ExternalLink,
  ChevronRight,
  PercentIcon,
  Scissors,
  Calculator,
  Droplet,
  Package,
  Trash2,
} from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogContentWithoutClose,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { cn } from "@/lib/utils";
import { motion } from "framer-motion";
import Image from "next/image";
import { OpenBottleIcon, ClosedBottleIcon } from "@/components/ui/bottle-icons";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Label } from "@/components/ui/label";
import { useToast } from "@/components/ui/use-toast";
import { format } from "date-fns";

// Import the RefundDialog component
import { RefundDialog } from "./components/refund-dialog";
import { ImportDialog } from "./components/import-dialog";
import { FilterModal } from "./components/filter-modal";
import { PartsModal } from "./components/parts-modal";
import { BrandCard } from "./components/brand-card";
import { BrandLogo } from "./components/brand-logo";

interface OilProduct {
  id: number;
  brand: string;
  name: string;
  basePrice: number;
  type: string;
  image?: string;
  volumes: {
    size: string;
    price: number;
  }[];
}

interface Product {
  id: number;
  name: string;
  price: number;
  category: "Filters" | "Parts" | "Additives & Fluids";
  brand?: string;
  type?: string;
}

interface CartItem extends Omit<Product, "category"> {
  quantity: number;
  details?: string;
  uniqueId: string;
  bottleType?: "open" | "closed";
}

interface SelectedVolume {
  size: string;
  quantity: number;
  price: number;
  bottleType?: "open" | "closed";
}

// Add these after the existing interface definitions near the top of the file
interface ImportedCustomer {
  id: string;
  name: string;
  email?: string;
  phone?: string;
  // Add any other properties that might be in imported customers
}

// Updated oil products data structure
const oilProducts: OilProduct[] = [
  {
    id: 101,
    brand: "Toyota",
    name: "0W-20",
    basePrice: 39.99,
    type: "0W-20",
    image: "/oils/toyota-0w20.jpg",
    volumes: [
      { size: "5L", price: 39.99 },
      { size: "4L", price: 34.99 },
      { size: "1L", price: 11.99 },
      { size: "500ml", price: 6.99 },
      { size: "250ml", price: 3.99 },
    ],
  },
  {
    id: 102,
    brand: "Toyota",
    name: "5W-30",
    basePrice: 39.99,
    type: "5W-30",
    image: "/oils/toyota-5w30.jpg",
    volumes: [
      { size: "5L", price: 39.99 },
      { size: "4L", price: 34.99 },
      { size: "1L", price: 11.99 },
      { size: "500ml", price: 6.99 },
      { size: "250ml", price: 3.99 },
    ],
  },
  {
    id: 103,
    brand: "Toyota",
    name: "10W-30",
    basePrice: 39.99,
    type: "10W-30",
    image: "/oils/toyota-10w30.jpg",
    volumes: [
      { size: "5L", price: 39.99 },
      { size: "4L", price: 34.99 },
      { size: "1L", price: 11.99 },
      { size: "500ml", price: 6.99 },
      { size: "250ml", price: 3.99 },
    ],
  },
  {
    id: 201,
    brand: "Shell",
    name: "0W-20",
    basePrice: 45.99,
    type: "0W-20",
    image: "/oils/shell-0w20.jpg",
    volumes: [
      { size: "5L", price: 45.99 },
      { size: "4L", price: 39.99 },
      { size: "1L", price: 13.99 },
      { size: "500ml", price: 7.99 },
      { size: "250ml", price: 4.99 },
    ],
  },
  {
    id: 202,
    brand: "Shell",
    name: "5W-30",
    basePrice: 45.99,
    type: "5W-30",
    image: "/oils/shell-5w30.jpg",
    volumes: [
      { size: "5L", price: 45.99 },
      { size: "4L", price: 39.99 },
      { size: "1L", price: 13.99 },
      { size: "500ml", price: 7.99 },
      { size: "250ml", price: 4.99 },
    ],
  },
  {
    id: 203,
    brand: "Shell",
    name: "10W-40",
    basePrice: 35.99,
    type: "10W-40",
    image: "/oils/shell-10w40.jpg",
    volumes: [
      { size: "5L", price: 35.99 },
      { size: "4L", price: 31.99 },
      { size: "1L", price: 11.99 },
      { size: "500ml", price: 6.99 },
      { size: "250ml", price: 3.99 },
    ],
  },
  {
    id: 301,
    brand: "Lexus",
    name: "0W-20",
    basePrice: 49.99,
    type: "0W-20",
    image: "/oils/lexus-0w20.jpg",
    volumes: [
      { size: "5L", price: 49.99 },
      { size: "4L", price: 43.99 },
      { size: "1L", price: 14.99 },
      { size: "500ml", price: 8.99 },
      { size: "250ml", price: 5.99 },
    ],
  },
  {
    id: 302,
    brand: "Lexus",
    name: "5W-30",
    basePrice: 49.99,
    type: "5W-30",
    image: "/oils/lexus-5w30.jpg",
    volumes: [
      { size: "5L", price: 49.99 },
      { size: "4L", price: 43.99 },
      { size: "1L", price: 14.99 },
      { size: "500ml", price: 8.99 },
      { size: "250ml", price: 5.99 },
    ],
  },
];

const products: Product[] = [
  // Toyota Filters
  {
    id: 3,
    name: "Oil Filter - Standard",
    price: 12.99,
    category: "Filters",
    brand: "Toyota",
    type: "Oil Filter",
  },
  {
    id: 4,
    name: "Air Filter - Standard",
    price: 15.99,
    category: "Filters",
    brand: "Toyota",
    type: "Air Filter",
  },
  {
    id: 5,
    name: "Air Filter - Medium",
    price: 17.99,
    category: "Filters",
    brand: "Toyota",
    type: "Air Filter",
  },
  {
    id: 6,
    name: "Cabin Filter - Standard",
    price: 11.99,
    category: "Filters",
    brand: "Toyota",
    type: "Cabin Filter",
  },
  {
    id: 7,
    name: "Cabin Filter - Deluxe",
    price: 25.99,
    category: "Filters",
    brand: "Toyota",
    type: "Cabin Filter",
  },
  {
    id: 8,
    name: "Oil Filter - Premium",
    price: 19.99,
    category: "Filters",
    brand: "Toyota",
    type: "Oil Filter",
  },
  {
    id: 9,
    name: "Oil Filter - Economy",
    price: 9.99,
    category: "Filters",
    brand: "Toyota",
    type: "Oil Filter",
  },
  // Honda Filters
  {
    id: 31,
    name: "Oil Filter - Basic",
    price: 11.99,
    category: "Filters",
    brand: "Honda",
    type: "Oil Filter",
  },
  {
    id: 32,
    name: "Air Filter - Basic",
    price: 14.99,
    category: "Filters",
    brand: "Honda",
    type: "Air Filter",
  },
  {
    id: 33,
    name: "Air Filter - Medium",
    price: 16.99,
    category: "Filters",
    brand: "Honda",
    type: "Air Filter",
  },
  {
    id: 34,
    name: "Cabin Filter - Basic",
    price: 12.99,
    category: "Filters",
    brand: "Honda",
    type: "Cabin Filter",
  },
  {
    id: 35,
    name: "Cabin Filter - Deluxe",
    price: 23.99,
    category: "Filters",
    brand: "Honda",
    type: "Cabin Filter",
  },
  {
    id: 36,
    name: "Oil Filter - Premium",
    price: 18.99,
    category: "Filters",
    brand: "Honda",
    type: "Oil Filter",
  },
  {
    id: 37,
    name: "Oil Filter - Economy",
    price: 8.99,
    category: "Filters",
    brand: "Honda",
    type: "Oil Filter",
  },
  // Nissan Filters
  {
    id: 41,
    name: "Oil Filter - Standard",
    price: 13.99,
    category: "Filters",
    brand: "Nissan",
    type: "Oil Filter",
  },
  {
    id: 42,
    name: "Air Filter - Standard",
    price: 16.99,
    category: "Filters",
    brand: "Nissan",
    type: "Air Filter",
  },
  {
    id: 43,
    name: "Air Filter - Medium",
    price: 18.99,
    category: "Filters",
    brand: "Nissan",
    type: "Air Filter",
  },
  {
    id: 44,
    name: "Cabin Filter - Standard",
    price: 13.99,
    category: "Filters",
    brand: "Nissan",
    type: "Cabin Filter",
  },
  {
    id: 45,
    name: "Cabin Filter - Deluxe",
    price: 26.99,
    category: "Filters",
    brand: "Nissan",
    type: "Cabin Filter",
  },
  {
    id: 46,
    name: "Oil Filter - Premium",
    price: 20.99,
    category: "Filters",
    brand: "Nissan",
    type: "Oil Filter",
  },
  {
    id: 47,
    name: "Oil Filter - Economy",
    price: 10.99,
    category: "Filters",
    brand: "Nissan",
    type: "Oil Filter",
  },
  // Other Products
  {
    id: 5,
    name: "Brake Pads",
    price: 45.99,
    category: "Parts",
    brand: "Generic",
    type: "Miscellaneous Parts",
  },
  {
    id: 6,
    name: "Spark Plugs",
    price: 8.99,
    category: "Parts",
    brand: "Generic",
    type: "Miscellaneous Parts",
  },

  // Additives with brand information
  {
    id: 7,
    name: "Fuel System Cleaner",
    price: 14.99,
    category: "Additives & Fluids",
    brand: "Shell",
  },
  {
    id: 8,
    name: "Oil Treatment",
    price: 11.99,
    category: "Additives & Fluids",
    brand: "Shell",
  },
  {
    id: 9001,
    name: "Diesel Additive",
    price: 16.99,
    category: "Additives & Fluids",
    brand: "Shell",
  },
  {
    id: 9002,
    name: "Engine Flush",
    price: 19.99,
    category: "Additives & Fluids",
    brand: "Toyota",
  },
  {
    id: 9003,
    name: "Radiator Coolant",
    price: 12.99,
    category: "Additives & Fluids",
    brand: "Toyota",
  },
  {
    id: 9004,
    name: "Fuel Injector Cleaner",
    price: 15.99,
    category: "Additives & Fluids",
    brand: "Toyota",
  },
  {
    id: 9005,
    name: "Octane Booster",
    price: 9.99,
    category: "Additives & Fluids",
    brand: "Lexus",
  },
  {
    id: 9006,
    name: "Transmission Fluid",
    price: 22.99,
    category: "Additives & Fluids",
    brand: "Lexus",
  },
  {
    id: 9007,
    name: "Power Steering Fluid",
    price: 13.99,
    category: "Additives & Fluids",
    brand: "Lexus",
  },
  {
    id: 9008,
    name: "Brake Fluid",
    price: 8.99,
    category: "Additives & Fluids",
    brand: "Castrol",
  },
  {
    id: 9009,
    name: "Engine Stop Leak",
    price: 17.99,
    category: "Additives & Fluids",
    brand: "Castrol",
  },
  {
    id: 9010,
    name: "Oil Stabilizer",
    price: 14.99,
    category: "Additives & Fluids",
    brand: "Castrol",
  },

  // Parts with brands and types
  {
    id: 1001,
    name: "Brake Pads - Front",
    price: 45.99,
    category: "Parts",
    brand: "Toyota",
    type: "Brake Parts",
  },
  {
    id: 1002,
    name: "Brake Pads - Rear",
    price: 39.99,
    category: "Parts",
    brand: "Toyota",
    type: "Brake Parts",
  },
  {
    id: 1003,
    name: "Brake Rotor - Front",
    price: 79.99,
    category: "Parts",
    brand: "Toyota",
    type: "Brake Parts",
  },
  {
    id: 1004,
    name: "Brake Rotor - Rear",
    price: 69.99,
    category: "Parts",
    brand: "Toyota",
    type: "Brake Parts",
  },
  {
    id: 1005,
    name: "Spark Plugs - Standard",
    price: 8.99,
    category: "Parts",
    brand: "Toyota",
    type: "Engine Parts",
  },
  {
    id: 1006,
    name: "Spark Plugs - Iridium",
    price: 18.99,
    category: "Parts",
    brand: "Toyota",
    type: "Engine Parts",
  },
  {
    id: 1007,
    name: "Ignition Coil",
    price: 45.99,
    category: "Parts",
    brand: "Toyota",
    type: "Engine Parts",
  },
  {
    id: 1008,
    name: "Water Pump",
    price: 89.99,
    category: "Parts",
    brand: "Toyota",
    type: "Cooling System",
  },
  {
    id: 1009,
    name: "Thermostat",
    price: 22.99,
    category: "Parts",
    brand: "Toyota",
    type: "Cooling System",
  },
  {
    id: 1010,
    name: "Radiator",
    price: 159.99,
    category: "Parts",
    brand: "Toyota",
    type: "Cooling System",
  },

  // Lexus Parts
  {
    id: 1011,
    name: "Brake Pads - Front",
    price: 65.99,
    category: "Parts",
    brand: "Lexus",
    type: "Brake Parts",
  },
  {
    id: 1012,
    name: "Brake Pads - Rear",
    price: 59.99,
    category: "Parts",
    brand: "Lexus",
    type: "Brake Parts",
  },
  {
    id: 1013,
    name: "Brake Rotor - Front",
    price: 99.99,
    category: "Parts",
    brand: "Lexus",
    type: "Brake Parts",
  },
  {
    id: 1014,
    name: "Brake Rotor - Rear",
    price: 89.99,
    category: "Parts",
    brand: "Lexus",
    type: "Brake Parts",
  },
  {
    id: 1015,
    name: "Spark Plugs - Iridium",
    price: 22.99,
    category: "Parts",
    brand: "Lexus",
    type: "Engine Parts",
  },
  {
    id: 1016,
    name: "Ignition Coil",
    price: 55.99,
    category: "Parts",
    brand: "Lexus",
    type: "Engine Parts",
  },

  // Honda Parts
  {
    id: 1017,
    name: "Brake Pads - Front",
    price: 42.99,
    category: "Parts",
    brand: "Honda",
    type: "Brake Parts",
  },
  {
    id: 1018,
    name: "Brake Pads - Rear",
    price: 38.99,
    category: "Parts",
    brand: "Honda",
    type: "Brake Parts",
  },
  {
    id: 1019,
    name: "Brake Rotor - Front",
    price: 69.99,
    category: "Parts",
    brand: "Honda",
    type: "Brake Parts",
  },
  {
    id: 1020,
    name: "Alternator",
    price: 129.99,
    category: "Parts",
    brand: "Honda",
    type: "Electrical",
  },
  {
    id: 1021,
    name: "Starter Motor",
    price: 139.99,
    category: "Parts",
    brand: "Honda",
    type: "Electrical",
  },

  // Nissan Parts
  {
    id: 1022,
    name: "Brake Pads - Front",
    price: 39.99,
    category: "Parts",
    brand: "Nissan",
    type: "Brake Parts",
  },
  {
    id: 1023,
    name: "Brake Pads - Rear",
    price: 36.99,
    category: "Parts",
    brand: "Nissan",
    type: "Brake Parts",
  },
  {
    id: 1024,
    name: "Oxygen Sensor",
    price: 49.99,
    category: "Parts",
    brand: "Nissan",
    type: "Sensors",
  },
  {
    id: 1025,
    name: "Mass Air Flow Sensor",
    price: 89.99,
    category: "Parts",
    brand: "Nissan",
    type: "Sensors",
  },
  {
    id: 1026,
    name: "Camshaft Position Sensor",
    price: 45.99,
    category: "Parts",
    brand: "Nissan",
    type: "Sensors",
  },
  // Add Battery products
  {
    id: 1027,
    name: "Standard Battery",
    price: 89.99,
    category: "Parts",
    brand: "Toyota",
    type: "Batteries",
  },
  {
    id: 1028,
    name: "Premium Battery",
    price: 129.99,
    category: "Parts",
    brand: "Toyota",
    type: "Batteries",
  },
  {
    id: 1029,
    name: "Economy Battery",
    price: 69.99,
    category: "Parts",
    brand: "Honda",
    type: "Batteries",
  },
  {
    id: 1030,
    name: "Heavy Duty Battery",
    price: 149.99,
    category: "Parts",
    brand: "Lexus",
    type: "Batteries",
  },
  {
    id: 1031,
    name: "Standard Battery",
    price: 84.99,
    category: "Parts",
    brand: "Nissan",
    type: "Batteries",
  },
  // Add Spark Plugs as a separate category
  {
    id: 1032,
    name: "Standard Spark Plugs",
    price: 7.99,
    category: "Parts",
    brand: "Toyota",
    type: "Spark Plugs",
  },
  {
    id: 1033,
    name: "Iridium Spark Plugs",
    price: 19.99,
    category: "Parts",
    brand: "Toyota",
    type: "Spark Plugs",
  },
  {
    id: 1034,
    name: "Platinum Spark Plugs",
    price: 14.99,
    category: "Parts",
    brand: "Honda",
    type: "Spark Plugs",
  },
  {
    id: 1035,
    name: "Premium Spark Plugs",
    price: 22.99,
    category: "Parts",
    brand: "Lexus",
    type: "Spark Plugs",
  },
  {
    id: 1036,
    name: "Performance Spark Plugs",
    price: 24.99,
    category: "Parts",
    brand: "Nissan",
    type: "Spark Plugs",
  },
];

// Memoize the cart item component
const CartItem = memo(
  ({
    item,
    updateQuantity,
    removeFromCart,
  }: {
    item: CartItem;
    updateQuantity: (id: number, quantity: number, uniqueId?: string) => void;
    removeFromCart: (id: number, uniqueId?: string) => void;
  }) => (
    <div className="grid grid-cols-[1fr_auto] gap-3 py-3 first:pt-0 items-start border-b last:border-b-0">
      {/* Item details */}
      <div className="min-w-0">
        <div className="font-medium text-[clamp(0.875rem,2vw,1rem)] mb-1">
          {item.name}
        </div>
        {item.bottleType && (
          <div className="flex items-center gap-1 mb-1">
            {item.bottleType === "closed" ? (
              <ClosedBottleIcon className="h-4 w-4 text-primary" />
            ) : (
              <OpenBottleIcon className="h-4 w-4 text-primary" />
            )}
            <span className="text-xs text-muted-foreground capitalize">
              {item.bottleType} bottle
            </span>
          </div>
        )}
        <div className="text-[clamp(0.75rem,1.5vw,0.875rem)] text-muted-foreground">
          OMR {item.price.toFixed(2)} each
        </div>
        <div className="font-medium text-[clamp(0.875rem,2vw,1rem)] mt-1">
          OMR {(item.price * item.quantity).toFixed(2)}
        </div>
      </div>

      {/* Right side controls: quantity and delete */}
      <div className="flex flex-col gap-2 items-end">
        {/* Delete button */}
        <Button
          variant="ghost"
          size="icon"
          className="h-6 w-6 flex-shrink-0"
          onClick={() => removeFromCart(item.id, item.uniqueId)}
          aria-label="Remove item"
        >
          <X className="h-3 w-3" />
        </Button>

        {/* Quantity controls - horizontal */}
        <div className="flex items-center gap-1 mt-1">
          <Button
            variant="outline"
            size="icon"
            className="h-6 w-6"
            onClick={() =>
              updateQuantity(
                item.id,
                Math.max(1, item.quantity - 1),
                item.uniqueId
              )
            }
          >
            <Minus className="h-3 w-3" />
          </Button>
          <span className="w-5 text-center font-medium text-xs">
            {item.quantity}
          </span>
          <Button
            variant="outline"
            size="icon"
            className="h-6 w-6"
            onClick={() =>
              updateQuantity(item.id, item.quantity + 1, item.uniqueId)
            }
          >
            <Plus className="h-3 w-3" />
          </Button>
        </div>
      </div>
    </div>
  )
);
CartItem.displayName = "CartItem";

// Memoize the product button component
const ProductButton = memo(
  ({
    product,
    addToCart,
  }: {
    product: Product;
    addToCart: (product: Product) => void;
  }) => (
    <Button
      key={product.id}
      variant="outline"
      className="h-[160px] sm:h-[180px] flex flex-col items-center justify-between text-center p-4 hover:shadow-md transition-all overflow-hidden"
      onClick={() => addToCart(product)}
    >
      <div className="flex items-center justify-center h-10 w-10 mb-2">
        <div className="w-8 h-8 rounded-full bg-muted flex items-center justify-center">
          <Package className="h-4 w-4 text-primary opacity-70" />
        </div>
      </div>
      <div className="text-center flex-1 flex flex-col justify-between">
        <span
          className="font-medium text-xs sm:text-sm word-wrap whitespace-normal leading-tight hyphens-auto"
          style={{ lineHeight: 1.1 }}
        >
          {product.name}
        </span>
        <span className="block text-sm text-primary mt-2">
          OMR {product.price.toFixed(2)}
        </span>
      </div>
    </Button>
  )
);
ProductButton.displayName = "ProductButton";

// Numpad component for cashier ID entry
function Numpad({
  value,
  onChange,
  onBackspace,
  onSubmit,
  disabled,
}: {
  value: string;
  onChange: (val: string) => void;
  onBackspace: () => void;
  onSubmit: () => void;
  disabled?: boolean;
}) {
  const touchHandled = useRef(false);

  const handleClick = (num: string) => {
    if (value.length < 6) onChange(value + num);
  };

  const handleTouchStart = (num: string) => {
    touchHandled.current = true;
    handleClick(num);
    setTimeout(() => {
      touchHandled.current = false;
    }, 100);
  };

  return (
    <div className="grid grid-cols-3 gap-2 w-48 mx-auto my-4">
      {[1, 2, 3, 4, 5, 6, 7, 8, 9].map((n) => (
        <button
          key={n}
          className="bg-muted rounded-lg p-4 text-xl font-bold hover:bg-accent"
          onClick={() => {
            if (!touchHandled.current) handleClick(n.toString());
          }}
          onTouchStart={() => handleTouchStart(n.toString())}
          disabled={disabled}
        >
          {n}
        </button>
      ))}
      <button
        className="bg-muted rounded-lg p-4 text-xl font-bold hover:bg-accent"
        onClick={() => {
          if (!touchHandled.current) onBackspace();
        }}
        onTouchStart={() => {
          touchHandled.current = true;
          onBackspace();
          setTimeout(() => {
            touchHandled.current = false;
          }, 100);
        }}
        disabled={disabled}
      >
        ⌫
      </button>
      <button
        className="bg-muted rounded-lg p-4 text-xl font-bold hover:bg-accent"
        onClick={() => {
          if (!touchHandled.current) handleClick("0");
        }}
        onTouchStart={() => handleTouchStart("0")}
        disabled={disabled}
      >
        0
      </button>
      <button
        className="bg-primary text-primary-foreground rounded-lg p-4 text-xl font-bold hover:bg-primary/90"
        onClick={() => {
          if (!touchHandled.current) onSubmit();
        }}
        onTouchStart={() => {
          touchHandled.current = true;
          onSubmit();
          setTimeout(() => {
            touchHandled.current = false;
          }, 100);
        }}
        disabled={disabled || value.length === 0}
      >
        OK
      </button>
    </div>
  );
}

export default function POSPage() {
  console.log("--- VERCEL DEBUG START ---");
  console.log("oilProducts length:", oilProducts.length);
  console.log(
    "First oil product:",
    oilProducts[0]
      ? oilProducts[0].brand
      : "oilProducts is empty or first item undefined"
  );
  console.log("products length:", products.length);
  console.log(
    "First product:",
    products[0] ? products[0].name : "products is empty or first item undefined"
  );
  console.log("--- VERCEL DEBUG END ---");

  const [cart, setCart] = useState<CartItem[]>([]);
  const [activeCategory, setActiveCategory] = useState<string>("Oil");
  const [searchQuery, setSearchQuery] = useState("");
  const [showCart, setShowCart] = useState(false);
  const [showClearCartDialog, setShowClearCartDialog] = useState(false);
  const [expandedBrand, setExpandedBrand] = useState<string | null>(null);
  const [selectedOil, setSelectedOil] = useState<OilProduct | null>(null);
  const [isVolumeModalOpen, setIsVolumeModalOpen] = useState(false);
  const [selectedVolumes, setSelectedVolumes] = useState<SelectedVolume[]>([]);
  const [selectedFilterBrand, setSelectedFilterBrand] = useState<string | null>(
    null
  );
  const [selectedFilterType, setSelectedFilterType] = useState<string | null>(
    null
  );
  const [isFilterBrandModalOpen, setIsFilterBrandModalOpen] = useState(false);
  const [selectedFilters, setSelectedFilters] = useState<
    Array<{ id: number; name: string; price: number; quantity: number }>
  >([]);
  const [filterImageError, setFilterImageError] = useState(false);
  const [oilImageError, setOilImageError] = useState(false);
  const [isCheckoutModalOpen, setIsCheckoutModalOpen] = useState(false);
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<
    "card" | "cash" | "mobile" | "voucher" | null
  >(null);
  const [showSuccess, setShowSuccess] = useState(false);
  const [showOtherOptions, setShowOtherOptions] = useState(false);
  const [isRefundDialogOpen, setIsRefundDialogOpen] = useState(false);
  const [isImportDialogOpen, setIsImportDialogOpen] = useState(false);

  // Add discount state
  const [isDiscountDialogOpen, setIsDiscountDialogOpen] = useState(false);
  const [discountType, setDiscountType] = useState<"percentage" | "amount">(
    "amount"
  );
  const [discountValue, setDiscountValue] = useState<number>(0);
  const [appliedDiscount, setAppliedDiscount] = useState<{
    type: "percentage" | "amount";
    value: number;
  } | null>(null);

  // Add a state to track if bottle type dialog is open
  const [showBottleTypeDialog, setShowBottleTypeDialog] = useState(false);
  const [currentBottleVolumeSize, setCurrentBottleVolumeSize] = useState<
    string | null
  >(null);

  // New state for cashiers with proper type
  const [isCashierSelectOpen, setIsCashierSelectOpen] = useState(false);
  const [selectedCashier, setSelectedCashier] = useState<string | null>(null);
  // Add cashier ID entry state
  const [enteredCashierId, setEnteredCashierId] = useState<string>("");
  const [fetchedCashier, setFetchedCashier] = useState<{
    id: number;
    name: string;
  } | null>(null);
  const [cashierIdError, setCashierIdError] = useState<string | null>(null);

  // Add new state variables for parts
  const [isPartBrandModalOpen, setIsPartBrandModalOpen] = useState(false);
  const [selectedPartBrand, setSelectedPartBrand] = useState<string | null>(
    null
  );
  const [selectedPartType, setSelectedPartType] = useState<string | null>(null);
  const [selectedParts, setSelectedParts] = useState<
    Array<{ id: number; name: string; price: number; quantity: number }>
  >([]);

  // Add state for payment recipient
  const [paymentRecipient, setPaymentRecipient] = useState<string | null>(null);

  // Mock cashier data
  const cashiers = [
    { id: 1, name: "Hossain (Owner)" },
    { id: 2, name: "Adnan Hossain" },
    { id: 3, name: "Fatima Al-Zadjali" },
    { id: 4, name: "Sara Al-Kindi" },
    { id: 5, name: "Khalid Al-Habsi" },
    { id: 101, name: "Test Cashier 101" },
    { id: 111, name: "Test Cashier 111" },
  ];
  // Memoize handlers
  const removeFromCart = useCallback((productId: number, uniqueId?: string) => {
    setCart((prevCart) => {
      // If uniqueId is provided, only remove the item with matching uniqueId
      if (uniqueId) {
        return prevCart.filter((item) => item.uniqueId !== uniqueId);
      }
      // Otherwise fall back to filtering by id (for backward compatibility)
      return prevCart.filter((item) => item.id !== productId);
    });
  }, []);

  const updateQuantity = useCallback(
    (productId: number, newQuantity: number, uniqueId?: string) => {
      if (newQuantity < 1) {
        removeFromCart(productId, uniqueId);
      } else {
        setCart((prevCart) =>
          prevCart.map((item) =>
            uniqueId
              ? item.uniqueId === uniqueId
                ? { ...item, quantity: newQuantity }
                : item
              : item.id === productId
              ? { ...item, quantity: newQuantity }
              : item
          )
        );
      }
    },
    [removeFromCart]
  );

  const addToCart = useCallback(
    (
      product: { id: number; name: string; price: number },
      details?: string,
      quantity: number = 1
    ) => {
      const uniqueId = `${product.id}-${details || ""}`;
      setCart((prevCart) => {
        const existingItem = prevCart.find(
          (item) => item.uniqueId === uniqueId
        );
        if (existingItem) {
          return prevCart.map((item) =>
            item.uniqueId === uniqueId
              ? { ...item, quantity: item.quantity + quantity }
              : item
          );
        }

        // Find the original product to get the brand if it exists
        const originalProduct =
          products.find((p) => p.id === product.id) ||
          oilProducts.find((p) => p.id === product.id);

        const brand =
          originalProduct && "brand" in originalProduct
            ? originalProduct.brand
            : undefined;
        const fullName = brand ? `${brand} ${product.name}` : product.name;

        return [
          ...prevCart,
          {
            ...product,
            name: fullName,
            quantity,
            details,
            uniqueId,
          },
        ];
      });
    },
    []
  );

  const handleOilSelect = useCallback((oil: OilProduct) => {
    setSelectedOil(oil);
    setSelectedVolumes([]);
    setIsVolumeModalOpen(true);
  }, []);

  // Function to handle volume selection with bottle type prompt for smaller volumes
  const handleVolumeClick = (volume: { size: string; price: number }) => {
    // For 4L and 5L, add directly without bottle type
    if (volume.size === "4L" || volume.size === "5L") {
      setSelectedVolumes((prev) => {
        const existing = prev.find((v) => v.size === volume.size);
        if (existing) {
          return prev.map((v) =>
            v.size === volume.size ? { ...v, quantity: v.quantity + 1 } : v
          );
        }
        return [...prev, { ...volume, quantity: 1 }];
      });
      return;
    }

    // For other volumes, show the bottle type dialog
    setCurrentBottleVolumeSize(volume.size);
    setShowBottleTypeDialog(true);
  };

  // Function to add volume with selected bottle type
  const addVolumeWithBottleType = (
    size: string,
    bottleType: "open" | "closed"
  ) => {
    const volumeDetails = selectedOil?.volumes.find((v) => v.size === size);
    if (volumeDetails) {
      setSelectedVolumes((prev) => {
        const existing = prev.find(
          (v) => v.size === size && v.bottleType === bottleType
        );
        if (existing) {
          return prev.map((v) =>
            v.size === size && v.bottleType === bottleType
              ? { ...v, quantity: v.quantity + 1 }
              : v
          );
        }
        return [...prev, { ...volumeDetails, quantity: 1, bottleType }];
      });
    }
    setShowBottleTypeDialog(false);
    setCurrentBottleVolumeSize(null);
  };

  const handleQuantityChange = (size: string, change: number) => {
    setSelectedVolumes((prev) => {
      const updated = prev
        .map((v) =>
          v.size === size
            ? { ...v, quantity: Math.max(0, v.quantity + change) }
            : v
        )
        .filter((v) => v.quantity > 0);
      return updated;
    });
  };

  const handleAddSelectedToCart = () => {
    selectedVolumes.forEach((volume) => {
      if (selectedOil) {
        const details =
          volume.size +
          (volume.bottleType ? ` (${volume.bottleType} bottle)` : "");
        addToCart(
          {
            id: selectedOil.id,
            name: selectedOil.name,
            price: volume.price,
          },
          details,
          volume.quantity
        );
      }
    });
    setIsVolumeModalOpen(false);
    setSelectedOil(null);
    setSelectedVolumes([]);
  };

  const handleNextItem = () => {
    // Add current selection to cart
    handleAddSelectedToCart();

    // Navigate to Filters section and close modal
    setActiveCategory("Filters");
    setIsVolumeModalOpen(false);
    setSelectedOil(null);
    setSelectedVolumes([]);
    setSearchQuery(""); // Clear search when changing categories
  };

  const oilBrands = Array.from(new Set(oilProducts.map((oil) => oil.brand)));

  const filterBrands = Array.from(
    new Set(
      products.filter((p) => p.category === "Filters").map((p) => p.brand!)
    )
  );

  const filterTypes = Array.from(
    new Set(
      products.filter((p) => p.category === "Filters").map((p) => p.type!)
    )
  );

  const getFiltersByType = (type: string) =>
    products.filter(
      (product) => product.category === "Filters" && product.type === type
    );

  // Memoize filtered data
  const filteredOilBrands = useMemo(
    () =>
      oilBrands.filter((brand) =>
        brand.toLowerCase().includes(searchQuery.toLowerCase())
      ),
    [searchQuery, oilBrands]
  );

  const filteredProducts = useMemo(
    () =>
      activeCategory === "Oil"
        ? []
        : products.filter((product) => {
            const matchesCategory = product.category === activeCategory;
            const matchesSearch = product.name
              .toLowerCase()
              .includes(searchQuery.toLowerCase());
            return matchesCategory && matchesSearch;
          }),
    [activeCategory, searchQuery]
  );

  // Calculate total with discount
  const subtotal = useMemo(
    () => cart.reduce((sum, item) => sum + item.price * item.quantity, 0),
    [cart]
  );

  const discountAmount = useMemo(() => {
    if (!appliedDiscount) return 0;

    if (appliedDiscount.type === "percentage") {
      return subtotal * (appliedDiscount.value / 100);
    } else {
      return Math.min(appliedDiscount.value, subtotal); // Don't allow discount larger than subtotal
    }
  }, [subtotal, appliedDiscount]);

  const total = useMemo(
    () => subtotal - discountAmount,
    [subtotal, discountAmount]
  );

  const handleFilterClick = (filter: Product) => {
    setSelectedFilters((prev) => {
      const existing = prev.find((f) => f.id === filter.id);
      if (existing) {
        return prev.map((f) =>
          f.id === filter.id ? { ...f, quantity: f.quantity + 1 } : f
        );
      }
      return [...prev, { ...filter, quantity: 1 }];
    });
  };

  const handleFilterQuantityChange = (filterId: number, change: number) => {
    setSelectedFilters((prev) => {
      const updated = prev
        .map((f) =>
          f.id === filterId
            ? { ...f, quantity: Math.max(0, f.quantity + change) }
            : f
        )
        .filter((f) => f.quantity > 0);
      return updated;
    });
  };

  const handleAddSelectedFiltersToCart = () => {
    selectedFilters.forEach((filter) => {
      addToCart(
        {
          id: filter.id,
          name: filter.name,
          price: filter.price,
        },
        undefined,
        filter.quantity
      );
    });
    setIsFilterBrandModalOpen(false);
    setSelectedFilters([]);
    setSelectedFilterType(null);
  };

  const handleNextFilterItem = () => {
    handleAddSelectedFiltersToCart();
    setActiveCategory("Parts");
    setSearchQuery("");
  };

  const clearCart = () => {
    setCart([]);
    setShowClearCartDialog(false);
  };

  const handleCheckout = () => {
    setIsCheckoutModalOpen(true);
  };

  const handlePaymentComplete = () => {
    // Instead of showing success immediately, show cashier selection dialog
    setIsCheckoutModalOpen(false);
    setIsCashierSelectOpen(true);
  };

  // Add this new function to handle final payment completion
  const handleFinalizePayment = () => {
    // Make a copy of the appliedDiscount before resetting state
    const discountForReceipt = appliedDiscount ? { ...appliedDiscount } : null;

    // Create payment info object to include recipient for mobile payments
    const paymentInfo = {
      method: selectedPaymentMethod,
      ...(selectedPaymentMethod === "mobile" && paymentRecipient
        ? { recipient: paymentRecipient }
        : {}),
    };

    setIsCashierSelectOpen(false);
    // Pass the receipt with the copied discount
    setShowSuccess(true);

    // We'll reset other states but keep the discount for the receipt
    console.log("Finalizing payment with discount:", discountForReceipt);
    console.log("Payment info:", paymentInfo);
  };

  // Replace the handleImportCustomers function definition with this one
  const handleImportCustomers = (importedCustomers: ImportedCustomer[]) => {
    // In a real implementation, this would add the imported customers to the database
    console.log("Imported customers:", importedCustomers);
    setIsImportDialogOpen(false);
  };

  // Function to toggle between open and closed bottle types
  const toggleBottleType = (size: string) => {
    setSelectedVolumes((prev) => {
      return prev.map((v) =>
        v.size === size
          ? {
              ...v,
              bottleType: v.bottleType === "open" ? "closed" : "open",
            }
          : v
      );
    });
  };

  // Function to apply discount
  const applyDiscount = () => {
    console.log("Applying discount:", discountType, discountValue);
    setAppliedDiscount({
      type: discountType,
      value: discountValue,
    });
    setIsDiscountDialogOpen(false);
  };

  // Function to remove discount
  const removeDiscount = () => {
    setAppliedDiscount(null);
    setDiscountValue(0);
  };

  // Debug discount state
  useEffect(() => {
    console.log("Main component discount state:", appliedDiscount);
  }, [appliedDiscount]);

  // Mobile Cart Animation State
  const [cartVisible, setCartVisible] = useState(false);
  useEffect(() => {
    if (showCart) {
      setCartVisible(true);
    } else {
      // Wait for the slide-out transition before hiding overlay
      const timeout = setTimeout(() => setCartVisible(false), 300);
      return () => clearTimeout(timeout);
    }
  }, [showCart]);

  // Parts handlers
  const handlePartClick = (part: {
    id: number;
    name: string;
    price: number;
  }) => {
    setSelectedParts((prev) => {
      const existing = prev.find((p) => p.id === part.id);
      if (existing) {
        return prev.map((p) =>
          p.id === part.id ? { ...p, quantity: p.quantity + 1 } : p
        );
      }
      return [...prev, { ...part, quantity: 1 }];
    });
  };

  const handlePartQuantityChange = (partId: number, change: number) => {
    setSelectedParts((prev) => {
      const updated = prev
        .map((p) =>
          p.id === partId
            ? { ...p, quantity: Math.max(0, p.quantity + change) }
            : p
        )
        .filter((p) => p.quantity > 0);
      return updated;
    });
  };

  const handleAddSelectedPartsToCart = () => {
    selectedParts.forEach((part) => {
      addToCart(
        {
          id: part.id,
          name: part.name,
          price: part.price,
        },
        undefined,
        part.quantity
      );
    });
    setIsPartBrandModalOpen(false);
    setSelectedParts([]);
    setSelectedPartType(null);
  };

  const handleNextPartItem = () => {
    handleAddSelectedPartsToCart();
    setActiveCategory("Additives & Fluids");
    setSearchQuery("");
  };

  // Get part brands and types - ensure we don't include undefined values
  const partBrands = Array.from(
    new Set(
      products
        .filter((p) => p.category === "Parts" && p.brand) // Only include products with brand
        .map((p) => p.brand!)
    )
  );

  const partTypes = Array.from(
    new Set(
      products
        .filter(
          (p) =>
            p.category === "Parts" &&
            p.type &&
            ["Miscellaneous Parts", "Spark Plugs", "Batteries"].includes(p.type)
        )
        .map((p) => p.type!)
    )
  );

  const getPartsByType = (type: string) =>
    products.filter(
      (product) => product.category === "Parts" && product.type === type
    );

  return (
    <div className="flex flex-col h-screen">
      {/* Rest of the component content */}
    </div>
  );
}
