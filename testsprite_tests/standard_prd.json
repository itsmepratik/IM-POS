{
  "meta": {
    "project": "Automotive POS and Inventory Management System",
    "date": "2025-09-29",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "This product is a specialized Point of Sale (POS) and inventory management system tailored for automotive service businesses. It supports tracking and sales of automotive products such as oils, filters, and parts, including features for handling partial oil volumes and real-time inventory management across multiple branches.",
  "core_goals": [
    "Create an intuitive POS interface for automotive product sales with support for discounts and various payment methods.",
    "Implement specialized inventory management for oil products that supports volume-based pricing and partial volume sales.",
    "Enable real-time inventory tracking and management across multiple branches including inventory transfers.",
    "Provide batch tracking for inventory items to monitor cost, quantity, and expiration.",
    "Deliver comprehensive sales and inventory reporting with export capabilities.",
    "Ensure system performance supports concurrent usage and large inventories without degradation.",
    "Apply role-based security and secure authentication methods to protect sensitive data."
  ],
  "key_features": [
    "Sales processing with cart management, discounts, multiple payment methods, and receipt generation.",
    "Refund processing integrated with inventory adjustments and refund receipt generation.",
    "Oil inventory management including tracking open vs. closed bottles, remaining volumes, and partial volume sales support.",
    "General inventory management with product categories, brand organization, batch tracking, stock alerts, and search functionality.",
    "Branch management supporting multiple locations with per-branch inventory tracking and inventory transfer workflows.",
    "Comprehensive reporting and analytics on sales, inventory levels, profit margins, and export options.",
    "User and role management with authentication and access controls.",
    "UI components and interfaces optimized for usability, including light/dark modes and responsive design."
  ],
  "user_flow_summary": [
    "Cashier logs in and accesses the POS interface.",
    "User selects products from inventory (including specifying oil volumes if applicable) to add to the cart.",
    "User applies discounts and selects a payment method, then completes the sale.",
    "System updates inventory automatically, records the sale, and generates a receipt.",
    "For refunds, user searches previous sales, selects items to refund, and processes refund which updates inventory and generates refund receipt.",
    "Inventory managers add or edit products, manage batches, and track stock levels including open oil bottles.",
    "Branch managers transfer inventory between locations through a validated process that ensures stock availability and records the transfer.",
    "Managers generate sales and inventory reports by selecting parameters and can export reports as needed."
  ],
  "validation_criteria": [
    "All high-priority functional requirements are fully implemented and verified.",
    "Sales transactions update inventory correctly, including partial oil volume handling.",
    "Inventory transfers between branches are accurately recorded and reflected in stock levels.",
    "Reports generate correct data based on selected parameters and can be exported.",
    "System supports at least 20 concurrent users and processes 1000 transactions daily without performance issues.",
    "Role-based access control and authentication mechanisms are enforced and validated.",
    "The UI adheres to design guidelines, supporting usability and accessibility standards."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "React",
      "Next.js (App Router & Pages Router)",
      "Tailwind CSS",
      "Bun runtime & bundler",
      "Supabase (Auth, Database, Storage)",
      "PostgreSQL (via Supabase cloud)",
      "Drizzle ORM",
      "Zod for schema validation",
      "React Hook Form & custom hooks",
      "WebSockets (ws)"
    ],
    "features": [
      {
        "name": "Inventory Management (Main & Branch)",
        "description": "Pages and components to list, filter, paginate, and modify inventory items for main warehouse and branch locations. Includes modals for item CRUD, category & brand management, and trade-in pricing.",
        "files": [
          "app/inventory/main-inventory/page.tsx",
          "app/inventory/branch-inventory/page.tsx",
          "app/inventory/hooks/useInventoryMockData.ts",
          "components/inventory/*",
          "lib/services/inventoryService.ts",
          "lib/services/branchInventoryService.ts"
        ]
      },
      {
        "name": "Point of Sale (POS)",
        "description": "Comprehensive POS workflow with cart management, checkout, trade-ins, refunds, receipt generation, and sync with inventory.",
        "files": [
          "app/pos/page.tsx",
          "app/pos/components/**/*",
          "lib/services/checkout-service.ts",
          "lib/services/refundService.ts",
          "lib/services/inventory-pos-sync.ts",
          "lib/types/**/*"
        ]
      },
      {
        "name": "Hooks & Context Providers",
        "description": "Reusable React hooks for data fetching (inventory, sales, users, etc.) and global contexts for auth, branch selection, company info, etc.",
        "files": [
          "lib/contexts/**/*.tsx",
          "lib/hooks/**/*.ts*"
        ]
      },
      {
        "name": "Supabase Integration Layer",
        "description": "Abstraction around Supabase client creation for browser and server, admin client, db schema SQL and migrations, plus Drizzle ORM setup.",
        "files": [
          "supabase/**/*",
          "lib/db/**/*"
        ]
      },
      {
        "name": "UI Components Library",
        "description": "Shared UI components such as buttons, dropdowns, tables, modals, pagination, sidebar, and toast notifications built with Tailwind and Headless UI patterns.",
        "files": [
          "components/**/*",
          "components/ui/**/*"
        ]
      },
      {
        "name": "Utils & Helpers",
        "description": "Utility functions for formatting, validation, receipt generation, environment config, etc.",
        "files": [
          "lib/utils.ts",
          "lib/utils/**/*",
          "lib/config.ts",
          "lib/utils/receipts.ts"
        ]
      },
      {
        "name": "Testing & Instrumentation",
        "description": "Scripts and utilities for validating checkout logic, database health checks, and testsprite integration.",
        "files": [
          "test-checkout-functionality.js",
          "scripts/**/*",
          "instrumentation.js"
        ]
      }
    ]
  }
}
